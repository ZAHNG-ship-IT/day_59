# #
# # 科室	X1	X2	X3	X4	X5	X6	X7	X8	X9
# # A	100	90	100	84	90	100	100	100	100
# # B	100	100	78.6	100	90	100	100	100	100
# # C	75	100	85.7	100	90	100	100	100	100
# # D	100	100	78.6	100	90	100	94.4	100	100
# # E	100	90	100	100	100	90	100	100	80
# # F	100	100	100	100	90	100	100	85.7	100
# # G	100	100	78.6	100	90	100	55.6	100	100
# # H	87.5	100	85.7	100	100	100	100	100	100
# # I	100	100	92.9	100	80	100	100	100	100
# # J	100	90	100	100	100	100	100	100	100
# # K	100	100	92.9	100	90	100	100	100	100
#
#
# import numpy as np
#
# li=[[100,90,100,84,90,100,100,100,100],
#     [100,100,78.6,100,90,100,100,100,100],
#     [75,100,85.7,100,90,100,100,100,100],
#     [100,100,78.6,100,90,100,94.4,100,100],
#     [100,90,100,100,100,90,100,100,80],
#     [100,100,100,100,90,100,100,85.7,100],
#     [100,100,78.6,100,90,100,55.6,100,100],
#     [87.5,100,85.7,100,100,100,100,100,100],
#     [100,100,92.9,100,80,100,100,100,100],
#     [100,90,100,100,100,100,100,100,100],
#     [100,100,92.9,100,90,100,100,100,100]]
#
# li = np.array(li)#创建基本信息向量
#
#
# ##标准化
# li.min(axis=0)
# # array([75. , 90. , 78.6, 84. , 80. , 90. , 55.6, 85.7, 80. ])
#
# li.max(axis=0)
# # array([100., 100., 100., 100., 100., 100., 100., 100., 100.])
#
# li.max(axis=0) - li.min(axis=0)
# # array([25. , 10. , 21.4, 16. , 20. , 10. , 44.4, 14.3, 20. ])
#
# li_norm = (li-li.min(axis=0))/(li.max(axis=0)-li.min(axis=0))
# li_norm = np.around(li_norm, decimals=2)
# '''
# array([[1.  , 0.  , 1.  , 0.  , 0.5 , 1.  , 1.  , 1.  , 1.  ],
#        [1.  , 1.  , 0.  , 1.  , 0.5 , 1.  , 1.  , 1.  , 1.  ],
#        [0.  , 1.  , 0.33, 1.  , 0.5 , 1.  , 1.  , 1.  , 1.  ],
#        [1.  , 1.  , 0.  , 1.  , 0.5 , 1.  , 0.87, 1.  , 1.  ],
#        [1.  , 0.  , 1.  , 1.  , 1.  , 0.  , 1.  , 1.  , 0.  ],
#        [1.  , 1.  , 1.  , 1.  , 0.5 , 1.  , 1.  , 0.  , 1.  ],
#        [1.  , 1.  , 0.  , 1.  , 0.5 , 1.  , 0.  , 1.  , 1.  ],
#        [0.5 , 1.  , 0.33, 1.  , 1.  , 1.  , 1.  , 1.  , 1.  ],
#        [1.  , 1.  , 0.67, 1.  , 0.  , 1.  , 1.  , 1.  , 1.  ],
#        [1.  , 0.  , 1.  , 1.  , 1.  , 1.  , 1.  , 1.  , 1.  ],
#        [1.  , 1.  , 0.67, 1.  , 0.5 , 1.  , 1.  , 1.  , 1.  ]])
# '''
#
# # 	e1	e2	e3	e4	e5	e6	e7	e8	e9
# # 信息熵	0.95	0.87	0.84	0.96	0.94	0.96	0.96	0.96	0.96
# li_norm.sum(axis=0)
# # array([ 9.5 ,  8.  ,  6.  , 10.  ,  6.5 , 10.  ,  9.87, 10.  , 10.  ])
#
# pij = li_norm / li_norm.sum(axis=0)
# m, n = li_norm.shape
# k = 1 / np.log(m)
# tmp = pij*np.log(pij)
# tmp = np.nan_to_num(tmp)
#
# ej = -k * (tmp.sum(axis=0))
# # array([0.95, 0.87, 0.84, 0.96, 0.94, 0.96, 0.96, 0.96, 0.96])
# ##公式
#
# wi = (1 - ej) / np.sum(1 - ej)
# wi = np.around(wi, decimals=2)
# # array([0.08, 0.22, 0.27, 0.07, 0.1 , 0.07, 0.07, 0.07, 0.07])
# #计算权重
#
# # 引入人工权重
# h = np.array([1,1,1,1,1,1,1,1,1])
# # 计算综合权重
# b = (h * wi)/((h * wi).sum())
#
# # 计算最终得分
# scores = np.around((b * li).sum(axis=1), decimals=2)
# # array([95.76, 93.35, 93.27, 92.97, 95.78, 98.04, 90.31, 95.23, 96.16, 97.84, 97.14])





# -*- encoding=utf-8 -*-
import numpy as np

def entropy(data, hweights):
    data_norm = (data-data.min(axis=0))/(data.max(axis=0)-data.min(axis=0))
    data_norm = np.around(data_norm, decimals=2)


    ##防止除以0
    eps = 1e-10
    pij = data_norm / data_norm.sum(axis=0)
    pij = np.where(pij == 0, eps, pij) ##代码优化结束
    m, n = data_norm.shape
    k = 1 / np.log(m)
    tmp = pij*np.log(pij)
    tmp = np.nan_to_num(tmp)

    ej = -k * (tmp.sum(axis=0))
    wi = (1 - ej) / np.sum(1 - ej)
    wi = np.around(wi, decimals=2)

    b = (hweights * wi)/((hweights * wi).sum())
    scores = np.around((b * data).sum(axis=1), decimals=2)
    return scores


if __name__ == '__main__':
    li=[[100,90,100,84,90,100,100,100,100],
    [100,100,78.6,100,90,100,100,100,100],
    [75,100,85.7,100,90,100,100,100,100],
    [100,100,78.6,100,90,100,94.4,100,100],
    [100,90,100,100,100,90,100,100,80],
    [100,100,100,100,90,100,100,85.7,100],
    [100,100,78.6,100,90,100,55.6,100,100],
    [87.5,100,85.7,100,100,100,100,100,100],
    [100,100,92.9,100,80,100,100,100,100],
    [100,90,100,100,100,100,100,100,100],
    [100,100,92.9,100,90,100,100,100,100]]

    li = np.array(li)
    h = np.array([1,1,1,1,1,1,1,1,1])
    rlt = entropy(data=li, hweights=h)
    print(rlt)


##以上仅仅指出了极大与极小的指标，中间值，区间值见下个文件处理